def length_of_lis(nums):
    if not nums:
        return 0
    
    dp = [1] * len(nums)
    
    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)
                
    return max(dp)

# Input sequence
sequence = input("Enter the elements of the sequence separated by commas: ")
nums = list(map(int, sequence.split(',')))

# Output the length of the longest increasing subsequence
print("Length of Longest Increasing Subsequence:", length_of_lis(nums))

LETTER COMBINATION OF PHONE NUMBER
Given a string containing digits from 2-9 inclusive, print all possible letter combinations that the number could represent. Print the answer in sorted order.
A mapping of digit to letters (just like on the telephone buttons) is given below.
Note
1 does not map to any letters.
2 : abc
3 : def
4 : ghi
5 : jkl
6 : mno
7 : pqrs
8 : tuv
9 : wxyz
Input
The first line of input contains a string of digits.
Output
Print all possible letter combinations that the number could represent, separated by spaces.
Example
Input:

23
Output:

ad ae af bd be bf cd ce cf


def letter_combinations(digits):
    if not digits:
        return []
    
    mapping = {
        '2': 'abc',
        '3': 'def',
        '4': 'ghi',
        '5': 'jkl',
        '6': 'mno',
        '7': 'pqrs',
        '8': 'tuv',
        '9': 'wxyz'
    }
    
    def backtrack(combination, next_digits):
        if len(next_digits) == 0:
            combinations.append(combination)
        else:
            for letter in mapping[next_digits[0]]:
                backtrack(combination + letter, next_digits[1:])
    
    combinations = []
    backtrack("", digits)
    return combinations

# Input
digits = input().strip()

# Output
result = letter_combinations(digits)
print(" ".join(result))


COURSE SCHEDULE
You are given a number N, the number of courses you have to take labeled from 0 t N-1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must 
take course bi first if you want to take course ai.

eg: [2,4] means take course 4 before you can take course 2.
Input
The First line of input number of courses (N).
The Second line of input size of prerequisites array (M)
Next line contains two integer each denoting ai and bi.
Output
print 1 if it is possible to finish all the courses else print 0.
Example
Input:

5
4
1 0
2 1
3 2
4 3
Output:

1

from collections import defaultdict

def can_finish_courses(num_courses, prerequisites):
    graph = defaultdict(list)
    indegree = [0] * num_courses
    
    # Build the graph and calculate indegree of each node
    for course, prereq in prerequisites:
        graph[prereq].append(course)
        indegree[course] += 1
    
    # Perform topological sorting
    queue = []
    for course in range(num_courses):
        if indegree[course] == 0:
            queue.append(course)
    
    while queue:
        course = queue.pop(0)
        num_courses -= 1
        for neighbor in graph[course]:
            indegree[neighbor] -= 1
            if indegree[neighbor] == 0:
                queue.append(neighbor)
    
    return num_courses == 0

# Input
num_courses = int(input())
num_prerequisites = int(input())
prerequisites = [list(map(int, input().split())) for _ in range(num_prerequisites)]

# Output
if can_finish_courses(num_courses, prerequisites):
    print(1)
else:
    print(0)


SPIRAL MATRIX
Print a given matrix in spiral form.

Given a 2D array, print it in spiral form. Refer the following examples.
Input
In First Line, Enter the number of rows
In Second Line, Enter the number of columns
In Third Line, Enter the matrix elements
Output
Print the Spiral elements
Example
Input:

3
3
1 2 3
4 5 6
7 8 9
Output:

1 2 3 6 9 8 7 4 5
