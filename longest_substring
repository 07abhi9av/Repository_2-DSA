


def length_of_lis(nums):
    if not nums:
        return 0
    
    dp = [1] * len(nums)
    
    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)
                
    return max(dp)

# Input sequence
sequence = input("Enter the elements of the sequence separated by commas: ")
nums = list(map(int, sequence.split(',')))

# Output the length of the longest increasing subsequence
print("Length of Longest Increasing Subsequence:", length_of_lis(nums))

LETTER COMBINATION OF PHONE NUMBER
Given a string containing digits from 2-9 inclusive, print all possible letter combinations that the number could represent. Print the answer in sorted order.
A mapping of digit to letters (just like on the telephone buttons) is given below.
Note
1 does not map to any letters.
2 : abc
3 : def
4 : ghi
5 : jkl
6 : mno
7 : pqrs
8 : tuv
9 : wxyz
Input
The first line of input contains a string of digits.
Output
Print all possible letter combinations that the number could represent, separated by spaces.
Example
Input:

23
Output:

ad ae af bd be bf cd ce cf


def letter_combinations(digits):
    if not digits:
        return []
    
    mapping = {
        '2': 'abc',
        '3': 'def',
        '4': 'ghi',
        '5': 'jkl',
        '6': 'mno',
        '7': 'pqrs',
        '8': 'tuv',
        '9': 'wxyz'
    }
    
    def backtrack(combination, next_digits):
        if len(next_digits) == 0:
            combinations.append(combination)
        else:
            for letter in mapping[next_digits[0]]:
                backtrack(combination + letter, next_digits[1:])
    
    combinations = []
    backtrack("", digits)
    return combinations

# Input
digits = input().strip()

# Output
result = letter_combinations(digits)
print(" ".join(result))


COURSE SCHEDULE
You are given a number N, the number of courses you have to take labeled from 0 t N-1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must 
take course bi first if you want to take course ai.

eg: [2,4] means take course 4 before you can take course 2.
Input
The First line of input number of courses (N).
The Second line of input size of prerequisites array (M)
Next line contains two integer each denoting ai and bi.
Output
print 1 if it is possible to finish all the courses else print 0.
Example
Input:

5
4
1 0
2 1
3 2
4 3
Output:

1

from collections import defaultdict

def can_finish_courses(num_courses, prerequisites):
    graph = defaultdict(list)
    indegree = [0] * num_courses
    
    # Build the graph and calculate indegree of each node
    for course, prereq in prerequisites:
        graph[prereq].append(course)
        indegree[course] += 1
    
    # Perform topological sorting
    queue = []
    for course in range(num_courses):
        if indegree[course] == 0:
            queue.append(course)
    
    while queue:
        course = queue.pop(0)
        num_courses -= 1
        for neighbor in graph[course]:
            indegree[neighbor] -= 1
            if indegree[neighbor] == 0:
                queue.append(neighbor)
    
    return num_courses == 0

# Input
num_courses = int(input())
num_prerequisites = int(input())
prerequisites = [list(map(int, input().split())) for _ in range(num_prerequisites)]

# Output
if can_finish_courses(num_courses, prerequisites):
    print(1)
else:
    print(0)


SPIRAL MATRIX
Print a given matrix in spiral form.

Given a 2D array, print it in spiral form. Refer the following examples.
Input
In First Line, Enter the number of rows
In Second Line, Enter the number of columns
In Third Line, Enter the matrix elements
Output
Print the Spiral elements
Example
Input:

3
3
1 2 3
4 5 6
7 8 9
Output:

1 2 3 6 9 8 7 4 5


def print_spiral(matrix):
    if not matrix:
        return []

    rows = len(matrix)
    cols = len(matrix[0])

    result = []

    top_row, bottom_row = 0, rows - 1
    left_col, right_col = 0, cols - 1

    while top_row <= bottom_row and left_col <= right_col:
        for i in range(left_col, right_col + 1):
            result.append(matrix[top_row][i])
        top_row += 1

        for i in range(top_row, bottom_row + 1):
            result.append(matrix[i][right_col])
        right_col -= 1

        if top_row <= bottom_row:
            for i in range(right_col, left_col - 1, -1):
                result.append(matrix[bottom_row][i])
            bottom_row -= 1

        if left_col <= right_col:
            for i in range(bottom_row, top_row - 1, -1):
                result.append(matrix[i][left_col])
            left_col += 1

    return result

# Input
rows = int(input())
cols = int(input())

matrix = []
for _ in range(rows):
    row = list(map(int, input().split()))
    matrix.append(row)

# Output
result = print_spiral(matrix)
print(' '.join(map(str, result)))




MINIMUM FUEL COST TO REPORT TO THE CAPITAL
There is a tree (i.e., a connected, undirected graph with no cycles) structure 
country network consisting of n cities numbered from 0 to n - 1 and exactly n - 1 roads.
The capital city is city 0. You are given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.
There is a meeting for the representatives of each city. The meeting is in the capital city.
There is a car in each city. You are given an integer seats that indicates the number of seats in each car.
A representative can use the car in their city to travel or change the car and ride with another representative. 
The cost of traveling between two cities is one liter of fuel.

Return the minimum number of liters of fuel to reach the capital city.
Input
1st Line, Enter the roads (format: 'from1 to1 , from2 to2,...')
2nd Line, Enter the number of seats
Output
Minimum fuel cost
Example
Input:

3 1,3 2,1 0,0 4,0 5,4 6
2
Output:

7




HOUSE ROBBER
You are a professional robber planning to rob houses along a street. 
Each house has a certain amount of money stashed, the only constraint 
stopping you from robbing each of them is that adjacent houses have security 
systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.
Input
In 1st Line, Enter the money in each house separated by commas
Output
Print the maximum amount of money
Example
Input:

1,2,3,1
Output:

4



def max_money(nums):
    if not nums:
        return 0
    if len(nums) == 1:
        return nums[0]

    prev_max = 0
    curr_max = nums[0]

    for i in range(1, len(nums)):
        temp = curr_max
        curr_max = max(curr_max, prev_max + nums[i])
        prev_max = temp

    return curr_max

# Input
nums_input = input("Enter the money in each house separated by commas: ")
nums = list(map(int, nums_input.split(',')))

# Output
print("Maximum amount of money:", max_money(nums))


MINIMUM FUEL COST TO REPORT TO THE CAPITAL
There is a tree (i.e., a connected, undirected graph with no cycles) structure 
country network consisting of n cities numbered from 0 to n - 1 and exactly n - 1 roads.
The capital city is city 0. You are given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.
There is a meeting for the representatives of each city. The meeting is in the capital city.
There is a car in each city. You are given an integer seats that indicates the number of seats in each car.
A representative can use the car in their city to travel or change the car and ride with another representative. 
The cost of traveling between two cities is one liter of fuel.

Return the minimum number of liters of fuel to reach the capital city.
Input
1st Line, Enter the roads (format: 'from1 to1 , from2 to2,...')
2nd Line, Enter the number of seats
Output
Minimum fuel cost
Example
Input:

3 1,3 2,1 0,0 4,0 5,4 6
2
Output:

7

class Solution:
    def minimumFuelCost(self, roads: List[List[int]], seats: int) -> int:
        def dfs(a: int, fa: int) -> int:
            nonlocal ans
            sz = 1
            for b in g[a]:
                if b != fa:
                    t = dfs(b, a)
                    ans += ceil(t / seats)
                    sz += t
            return sz

        g = defaultdict(list)
        for a, b in roads:
            g[a].append(b)
            g[b].append(a)
        ans = 0
        dfs(0, -1)
        return ans

modify the code accordingly


from collections import defaultdict
from math import ceil

def minimumFuelCost(roads, seats):
    def dfs(a, fa):
        nonlocal ans
        sz = 1
        for b in g[a]:
            if b != fa:
                t = dfs(b, a)
                ans += (t + seats - 1) // seats  # Ceiling division
                sz += t
        return sz

    g = defaultdict(list)
    for a, b in roads:
        g[a].append(b)
        g[b].append(a)
    ans = 0
    dfs(0, -1)
    return ans

# Input
roads_input = input("Enter the roads (format: 'from1 to1 , from2 to2,...'): ")
roads = [list(map(int, pair.split())) for pair in roads_input.split(',')]
seats = int(input("Enter the number of seats: "))

# Output
print("Minimum fuel cost:", minimumFuelCost(roads, seats))


GENERATE PARENTHESIS
Given a positive integer n, write a function to generate all combinations of well-formed parentheses. The goal is to generate all possible combinations of parentheses such that they are balanced.

A well-formed parentheses string is defined as follows:

The empty string is well-formed.
If "X" is a well-formed parentheses string, then "(X)" is also well-formed.
If "X" and "Y" are well-formed parentheses strings, then "XY" is also well-formed.
Input
Enter the value of n
Output
Combinations of well-formed parentheses for n
Example
Input:

3
Output:

((()))
(()())
(())()
()(())
()()()



def generateParenthesis(n):
    def backtrack(s, left, right):
        if len(s) == 2 * n:
            result.append(s)
            return
        if left < n:
            backtrack(s + '(', left + 1, right)
        if right < left:
            backtrack(s + ')', left, right + 1)

    result = []
    backtrack('', 0, 0)
    return result

# Input
n = int(input("Enter the value of n: "))

# Output
print("Combinations of well-formed parentheses for n:")
for combination in generateParenthesis(n):
    print(combination)




IMPLEMENT STACK USING QUEUES
Implement stack using two queues. You need to complete the push and pop function of stack class. You are given 2 types of queries-
'1' which represents that we need to push an integer into the stack.
'2' which represents that we need to pop the top element from the stack. If there is no top element simply return -1.
Input Format
First line contains q of queries.
Followed by q lines.
Query of type 1 is followed by an integer x to push element in the stack.
Query of type 2 is for pop the top value from the stack and print it.
Output Format
Print the value for pop operations in the query given.
Example 1
Input
5
1 2
1 3
2
1 4
2
Output:

3 4
