MINIMUM DELETIONS TO MAKE ARRAYS DIVISIBLE
You are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums.
Return the minimum number of deletions such that the smallest element in nums divides all the elements of numsDivide.
If this is not possible, return -1.
Note that an integer x divides y if y % x == 0.
Input
Input must be in 2 lines.
1st Line, Enter the interger array 'nums' as space seperated values. 
2nd Line, Enter the interger array 'numsDivide' as space seperated values. 
Output
Return the min no of deletion as integer. If this is not possible, return -1.
Example
Input:

2 3 2 4 3
9 6 9 3 15
Output:

2




BINARY RIGHT SIDE VIEW
You are given a root pointer to the root of binary tree. You have to print the right view of the tree from top to bottom.

Note The right view of a tree is the set of nodes that are visible from the right side.

You need to complete the given function. The input and printing of output will be handled by the driver code.

Input
The first line contains the number of test cases. The second line contains a string giving array representation of a tree, if the root has no children give N in input.

Output
For each test case print the right view of the binary tree.

Example
Input: 1 1 2 3

Output: 1 3



def min_deletions(nums, numsDivide):
    min_num = min(nums)
    deletions = 0
    for num in nums:
        if num == min_num:
            continue
        for n in numsDivide:
            if n % num != 0:
                deletions += 1
                break
    return deletions if deletions < len(nums) else -1

# Input
nums = list(map(int, input().split()))
numsDivide = list(map(int, input().split()))

# Output
print(min_deletions(nums, numsDivide))

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def right_view(root):
    if not root:
        return []

    result = []
    queue = [root]

    while queue:
        size = len(queue)
        for i in range(size):
            node = queue.pop(0)
            if i == size - 1:
                result.append(node.val)
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)

    return result

# Parse tree from input string
def parse_tree(s):
    if s == 'N':
        return None
    nodes = s.split()
    root = TreeNode(int(nodes[0]))
    queue = [root]
    i = 1
    while queue:
        node = queue.pop(0)
        if node:
            if nodes[i] != 'N':
                node.left = TreeNode(int(nodes[i]))
                queue.append(node.left)
            i += 1
            if i < len(nodes) and nodes[i] != 'N':
                node.right = TreeNode(int(nodes[i]))
                queue.append(node.right)
            i += 1
    return root

# Take input from the user
def take_input():
    test_cases = int(input("Enter the number of test cases: "))
    trees = []
    for _ in range(test_cases):
        tree_str = input("Enter the array representation of the tree: ")
        trees.append(tree_str)
    return trees

# Print right view for each tree
def print_right_view(test_cases):
    for tree_str in test_cases:
        root = parse_tree(tree_str)
        result = right_view(root)
        print(*result)

# Main function
if __name__ == "__main__":
    test_cases = take_input()
    print_right_view(test_cases)