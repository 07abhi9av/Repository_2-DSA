MINIMUM DELETIONS TO MAKE ARRAYS DIVISIBLE
You are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums.
Return the minimum number of deletions such that the smallest element in nums divides all the elements of numsDivide.
If this is not possible, return -1.
Note that an integer x divides y if y % x == 0.
Input
Input must be in 2 lines.
1st Line, Enter the interger array 'nums' as space seperated values. 
2nd Line, Enter the interger array 'numsDivide' as space seperated values. 
Output
Return the min no of deletion as integer. If this is not possible, return -1.
Example
Input:

2 3 2 4 3
9 6 9 3 15
Output:

2


class Solution:
    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:
        x = numsDivide[0]
        for v in numsDivide[1:]:
            x = gcd(x, v)
        nums.sort()
        for i, v in enumerate(nums):
            if x % v == 0:
                return i
        return -1


from typing import List
from math import gcd

class Solution:
    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:
        x = numsDivide[0]
        for v in numsDivide[1:]:
            x = gcd(x, v)
        nums.sort()
        for i, v in enumerate(nums):
            if x % v == 0:
                return i
        return -1

# Input
nums = list(map(int, input().split()))
numsDivide = list(map(int, input().split()))

# Instantiate Solution class
solution = Solution()

# Output
print(solution.minOperations(nums, numsDivide))



MERGE K SORTED LINKED LISTS
You are given an array of k linkedlists, where each linked list is sorted in ascending order. 
Write a Java program to merge all the linked lists into a single linked list and return it.
Input
An integer `k` representing the number of linkedlists. 
For each linkedlist:
An integer `size` representing the number of elements in the linkedlist.
`size` integers representing the elements of the linkedlist in sorted order.
Output
A single line containing the elements of the merged linked list in sorted order.
Example
Input:

2
4
1 4 5 6
3
1 2 4 5
Output:

1 1 2 4 4 5 6


# Python3 program to merge k
# sorted arrays of size n each

# A Linked List node


class Node:

	def __init__(self, x):

		self.data = x
		self.next = None

# Function to print nodes in
# a given linked list


def printList(node):

	while (node != None):
		print(node.data,
			end=" ")
		node = node.next

# The main function that
# takes an array of lists
# arr[0..last] and generates
# the sorted output


def mergeKLists(arr, last):

	# Traverse form second
	# list to last
	for i in range(1, last + 1):
		while (True):
			# head of both the lists,
			# 0 and ith list.
			head_0 = arr[0]
			head_i = arr[i]

			# Break if list ended
			if (head_i == None):
				break

			# Smaller than first
			# element
			if (head_0.data >=
					head_i.data):
				arr[i] = head_i.next
				head_i.next = head_0
				arr[0] = head_i
			else:
				# Traverse the first list
				while (head_0.next != None):
					# Smaller than next
					# element
					if (head_0.next.data >=
							head_i.data):
						arr[i] = head_i.next
						head_i.next = head_0.next
						head_0.next = head_i
						break
					# go to next node
					head_0 = head_0.next
					# if last node
					if (head_0.next == None):
						arr[i] = head_i.next
						head_i.next = None
						head_0.next = head_i
						head_0.next.next = None
						break
	return arr[0]


# Driver code
if __name__ == '__main__':

	# Number of linked
	# lists
	k = 3

	# Number of elements
	# in each list
	n = 4

	# an array of pointers
	# storing the head nodes
	# of the linked lists
	arr = [None for i in range(k)]

	arr[0] = Node(1)
	arr[0].next = Node(3)
	arr[0].next.next = Node(5)
	arr[0].next.next.next = Node(7)

	arr[1] = Node(2)
	arr[1].next = Node(4)
	arr[1].next.next = Node(6)
	arr[1].next.next.next = Node(8)

	arr[2] = Node(0)
	arr[2].next = Node(9)
	arr[2].next.next = Node(10)
	arr[2].next.next.next = Node(11)

	# Merge all lists
	head = mergeKLists(arr, k - 1)

	printList(head)

# This code is contributed by Mohit Kumar 29


class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    from heapq import heappush, heappop
    heap = []
    for lst in lists:
        while lst:
            heappush(heap, lst.val)
            lst = lst.next

    dummy = ListNode()
    curr = dummy
    while heap:
        val = heappop(heap)
        curr.next = ListNode(val)
        curr = curr.next

    return dummy.next

# Example usage
if __name__ == "__main__":
    # Example input
    k = 2
    lists = []
    head1 = ListNode(1, ListNode(4, ListNode(5, ListNode(6))))
    head2 = ListNode(1, ListNode(2, ListNode(4, ListNode(5))))
    lists.append(head1)
    lists.append(head2)

    # Merging k sorted linked lists
    merged_head = mergeKLists(lists)

    # Printing the merged linked list
    while merged_head:
        print(merged_head.val, end=" ")
        merged_head = merged_head.next


class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    from heapq import heappush, heappop
    heap = []
    for lst in lists:
        while lst:
            heappush(heap, lst.val)
            lst = lst.next

    dummy = ListNode()
    curr = dummy
    while heap:
        val = heappop(heap)
        curr.next = ListNode(val)
        curr = curr.next

    return dummy.next

# Taking user input
k = int(input("Enter the number of linked lists: "))
lists = []
for _ in range(k):
    size = int(input("Enter the size of the linked list: "))
    elements = list(map(int, input("Enter the elements of the linked list in sorted order: ").split()))
    head = ListNode(elements[0])
    curr = head
    for val in elements[1:]:
        curr.next = ListNode(val)
        curr = curr.next
    lists.append(head)

# Merging k sorted linked lists
merged_head = mergeKLists(lists)

# Printing the merged linked list
while merged_head:
    print(merged_head.val, end=" ")
    merged_head = merged_head.next