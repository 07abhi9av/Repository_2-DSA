MINIMUM DELETIONS TO MAKE ARRAYS DIVISIBLE
You are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums.
Return the minimum number of deletions such that the smallest element in nums divides all the elements of numsDivide.
If this is not possible, return -1.
Note that an integer x divides y if y % x == 0.
Input
Input must be in 2 lines.
1st Line, Enter the interger array 'nums' as space seperated values. 
2nd Line, Enter the interger array 'numsDivide' as space seperated values. 
Output
Return the min no of deletion as integer. If this is not possible, return -1.
Example
Input:

2 3 2 4 3
9 6 9 3 15
Output:

2


class Solution:
    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:
        x = numsDivide[0]
        for v in numsDivide[1:]:
            x = gcd(x, v)
        nums.sort()
        for i, v in enumerate(nums):
            if x % v == 0:
                return i
        return -1


from typing import List
from math import gcd

class Solution:
    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:
        x = numsDivide[0]
        for v in numsDivide[1:]:
            x = gcd(x, v)
        nums.sort()
        for i, v in enumerate(nums):
            if x % v == 0:
                return i
        return -1

# Input
nums = list(map(int, input().split()))
numsDivide = list(map(int, input().split()))

# Instantiate Solution class
solution = Solution()

# Output
print(solution.minOperations(nums, numsDivide))



MERGE K SORTED LINKED LISTS
You are given an array of k linkedlists, where each linked list is sorted in ascending order. 
Write a Java program to merge all the linked lists into a single linked list and return it.
Input
An integer `k` representing the number of linkedlists. 
For each linkedlist:
An integer `size` representing the number of elements in the linkedlist.
`size` integers representing the elements of the linkedlist in sorted order.
Output
A single line containing the elements of the merged linked list in sorted order.
Example
Input:

2
4
1 4 5 6
3
1 2 4 5
Output:

1 1 2 4 4 5 6


import heapq

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def merge_k_lists(lists):
    if not lists:
        return None
    
    heap = []
    for node in lists:
        if node:
            heap.append((node.val, node))
    
    heapq.heapify(heap)
    dummy = ListNode(0)
    tail = dummy
    
    while heap:
        _, smallest_node = heapq.heappop(heap)
        tail.next = smallest_node
        tail = tail.next
        
        if smallest_node.next:
            heapq.heappush(heap, (smallest_node.next.val, smallest_node.next))
    
    return dummy.next

# Taking user input
k = int(input("Enter the number of linked lists: "))
lists = []
for _ in range(k):
    size = int(input("Enter the size of linked list {}: ".format(_ + 1)))
    elements = list(map(int, input("Enter the elements of linked list {}: ".format(_ + 1)).split()))
    head = ListNode(elements[0])
    current = head
    for val in elements[1:]:
        current.next = ListNode(val)
        current = current.next
    lists.append(head)

# Merging lists
merged_list = merge_k_lists(lists)

# Printing merged list
result = []
while merged_list:
    result.append(str(merged_list.val))
    merged_list = merged_list.next
print(" ".join(result))
